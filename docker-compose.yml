services:

  db:
    image: postgres:15-alpine
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - static_volume:/app/static
      - media_volume:/app/media
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - db

  redis:
    container_name: redis
    image: redis:7-alpine
    restart: always
    env_file:
      - .env
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - redis

  celery_word_app:
    build: .
    container_name: celery_word_app
    restart: always
    env_file:
      - .env
    volumes:
      - .:/app
    command: celery -A core worker -Q word_app_queue -n word_app_worker@%h --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "core", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - celery

  celery_target_app:
    build: .
    container_name: celery_target_app
    restart: always
    env_file:
      - .env
    volumes:
      - .:/app
    command: celery -A core worker -Q target_app_queue -n target_app_worker@%h --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "core", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend:
        aliases:
          - celery

  web:
    container_name: web
    build: .
    command: >
      sh -c "python manage.py makemigrations --noinput &&
             python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn core.wsgi:application --bind 0.0.0.0:8008 --workers 3 --threads 8" 
    env_file:
      - .env
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8008:8008"
    depends_on:
      db:
        condition: service_healthy
      celery_word_app:
        condition: service_healthy
      celery_target_app:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - web

  flower:
    image: mher/flower
    container_name: flower
    restart: always
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    env_file:
      - .env
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      celery_word_app:
        condition: service_healthy
      celery_target_app:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - flower

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      backend:
        aliases:
          - prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      backend:
        aliases:
          - grafana

  celery_exporter:
    image: danihodovic/celery-exporter
    container_name: celery-exporter
    restart: always
    ports:
      - "9808:9808"
    command:  --broker-url=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      backend:
        aliases:
          - celery_exporter


volumes:
  db_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  backend:
    driver: bridge
